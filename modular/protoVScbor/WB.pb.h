// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_WB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_WB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_WB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_WB_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WB_2eproto;
class WeightsBiases;
class WeightsBiasesDefaultTypeInternal;
extern WeightsBiasesDefaultTypeInternal _WeightsBiases_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::WeightsBiases* Arena::CreateMaybeMessage<::WeightsBiases>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class WeightsBiases PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WeightsBiases) */ {
 public:
  inline WeightsBiases() : WeightsBiases(nullptr) {};
  virtual ~WeightsBiases();

  WeightsBiases(const WeightsBiases& from);
  WeightsBiases(WeightsBiases&& from) noexcept
    : WeightsBiases() {
    *this = ::std::move(from);
  }

  inline WeightsBiases& operator=(const WeightsBiases& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeightsBiases& operator=(WeightsBiases&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WeightsBiases& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeightsBiases* internal_default_instance() {
    return reinterpret_cast<const WeightsBiases*>(
               &_WeightsBiases_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WeightsBiases& a, WeightsBiases& b) {
    a.Swap(&b);
  }
  inline void Swap(WeightsBiases* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeightsBiases* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeightsBiases* New() const final {
    return CreateMaybeMessage<WeightsBiases>(nullptr);
  }

  WeightsBiases* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeightsBiases>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WeightsBiases& from);
  void MergeFrom(const WeightsBiases& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeightsBiases* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WeightsBiases";
  }
  protected:
  explicit WeightsBiases(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WB_2eproto);
    return ::descriptor_table_WB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kW1FieldNumber = 1,
    kB1FieldNumber = 2,
    kW2FieldNumber = 3,
    kB2FieldNumber = 4,
  };
  // repeated float w1 = 1;
  int w1_size() const;
  private:
  int _internal_w1_size() const;
  public:
  void clear_w1();
  private:
  float _internal_w1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_w1() const;
  void _internal_add_w1(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_w1();
  public:
  float w1(int index) const;
  void set_w1(int index, float value);
  void add_w1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      w1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_w1();

  // repeated float b1 = 2;
  int b1_size() const;
  private:
  int _internal_b1_size() const;
  public:
  void clear_b1();
  private:
  float _internal_b1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_b1() const;
  void _internal_add_b1(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_b1();
  public:
  float b1(int index) const;
  void set_b1(int index, float value);
  void add_b1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      b1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_b1();

  // repeated float w2 = 3;
  int w2_size() const;
  private:
  int _internal_w2_size() const;
  public:
  void clear_w2();
  private:
  float _internal_w2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_w2() const;
  void _internal_add_w2(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_w2();
  public:
  float w2(int index) const;
  void set_w2(int index, float value);
  void add_w2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      w2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_w2();

  // repeated float b2 = 4;
  int b2_size() const;
  private:
  int _internal_b2_size() const;
  public:
  void clear_b2();
  private:
  float _internal_b2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_b2() const;
  void _internal_add_b2(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_b2();
  public:
  float b2(int index) const;
  void set_b2(int index, float value);
  void add_b2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      b2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_b2();

  // @@protoc_insertion_point(class_scope:WeightsBiases)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > w1_;
  mutable std::atomic<int> _w1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > b1_;
  mutable std::atomic<int> _b1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > w2_;
  mutable std::atomic<int> _w2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > b2_;
  mutable std::atomic<int> _b2_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WeightsBiases

// repeated float w1 = 1;
inline int WeightsBiases::_internal_w1_size() const {
  return w1_.size();
}
inline int WeightsBiases::w1_size() const {
  return _internal_w1_size();
}
inline void WeightsBiases::clear_w1() {
  w1_.Clear();
}
inline float WeightsBiases::_internal_w1(int index) const {
  return w1_.Get(index);
}
inline float WeightsBiases::w1(int index) const {
  // @@protoc_insertion_point(field_get:WeightsBiases.w1)
  return _internal_w1(index);
}
inline void WeightsBiases::set_w1(int index, float value) {
  w1_.Set(index, value);
  // @@protoc_insertion_point(field_set:WeightsBiases.w1)
}
inline void WeightsBiases::_internal_add_w1(float value) {
  w1_.Add(value);
}
inline void WeightsBiases::add_w1(float value) {
  _internal_add_w1(value);
  // @@protoc_insertion_point(field_add:WeightsBiases.w1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WeightsBiases::_internal_w1() const {
  return w1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WeightsBiases::w1() const {
  // @@protoc_insertion_point(field_list:WeightsBiases.w1)
  return _internal_w1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WeightsBiases::_internal_mutable_w1() {
  return &w1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WeightsBiases::mutable_w1() {
  // @@protoc_insertion_point(field_mutable_list:WeightsBiases.w1)
  return _internal_mutable_w1();
}

// repeated float b1 = 2;
inline int WeightsBiases::_internal_b1_size() const {
  return b1_.size();
}
inline int WeightsBiases::b1_size() const {
  return _internal_b1_size();
}
inline void WeightsBiases::clear_b1() {
  b1_.Clear();
}
inline float WeightsBiases::_internal_b1(int index) const {
  return b1_.Get(index);
}
inline float WeightsBiases::b1(int index) const {
  // @@protoc_insertion_point(field_get:WeightsBiases.b1)
  return _internal_b1(index);
}
inline void WeightsBiases::set_b1(int index, float value) {
  b1_.Set(index, value);
  // @@protoc_insertion_point(field_set:WeightsBiases.b1)
}
inline void WeightsBiases::_internal_add_b1(float value) {
  b1_.Add(value);
}
inline void WeightsBiases::add_b1(float value) {
  _internal_add_b1(value);
  // @@protoc_insertion_point(field_add:WeightsBiases.b1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WeightsBiases::_internal_b1() const {
  return b1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WeightsBiases::b1() const {
  // @@protoc_insertion_point(field_list:WeightsBiases.b1)
  return _internal_b1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WeightsBiases::_internal_mutable_b1() {
  return &b1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WeightsBiases::mutable_b1() {
  // @@protoc_insertion_point(field_mutable_list:WeightsBiases.b1)
  return _internal_mutable_b1();
}

// repeated float w2 = 3;
inline int WeightsBiases::_internal_w2_size() const {
  return w2_.size();
}
inline int WeightsBiases::w2_size() const {
  return _internal_w2_size();
}
inline void WeightsBiases::clear_w2() {
  w2_.Clear();
}
inline float WeightsBiases::_internal_w2(int index) const {
  return w2_.Get(index);
}
inline float WeightsBiases::w2(int index) const {
  // @@protoc_insertion_point(field_get:WeightsBiases.w2)
  return _internal_w2(index);
}
inline void WeightsBiases::set_w2(int index, float value) {
  w2_.Set(index, value);
  // @@protoc_insertion_point(field_set:WeightsBiases.w2)
}
inline void WeightsBiases::_internal_add_w2(float value) {
  w2_.Add(value);
}
inline void WeightsBiases::add_w2(float value) {
  _internal_add_w2(value);
  // @@protoc_insertion_point(field_add:WeightsBiases.w2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WeightsBiases::_internal_w2() const {
  return w2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WeightsBiases::w2() const {
  // @@protoc_insertion_point(field_list:WeightsBiases.w2)
  return _internal_w2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WeightsBiases::_internal_mutable_w2() {
  return &w2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WeightsBiases::mutable_w2() {
  // @@protoc_insertion_point(field_mutable_list:WeightsBiases.w2)
  return _internal_mutable_w2();
}

// repeated float b2 = 4;
inline int WeightsBiases::_internal_b2_size() const {
  return b2_.size();
}
inline int WeightsBiases::b2_size() const {
  return _internal_b2_size();
}
inline void WeightsBiases::clear_b2() {
  b2_.Clear();
}
inline float WeightsBiases::_internal_b2(int index) const {
  return b2_.Get(index);
}
inline float WeightsBiases::b2(int index) const {
  // @@protoc_insertion_point(field_get:WeightsBiases.b2)
  return _internal_b2(index);
}
inline void WeightsBiases::set_b2(int index, float value) {
  b2_.Set(index, value);
  // @@protoc_insertion_point(field_set:WeightsBiases.b2)
}
inline void WeightsBiases::_internal_add_b2(float value) {
  b2_.Add(value);
}
inline void WeightsBiases::add_b2(float value) {
  _internal_add_b2(value);
  // @@protoc_insertion_point(field_add:WeightsBiases.b2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WeightsBiases::_internal_b2() const {
  return b2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
WeightsBiases::b2() const {
  // @@protoc_insertion_point(field_list:WeightsBiases.b2)
  return _internal_b2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WeightsBiases::_internal_mutable_b2() {
  return &b2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
WeightsBiases::mutable_b2() {
  // @@protoc_insertion_point(field_mutable_list:WeightsBiases.b2)
  return _internal_mutable_b2();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_WB_2eproto
